package BasicHTML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ATag;
  private ConceptPresentation props_AbstractTag;
  private ConceptPresentation props_BodyTag;
  private ConceptPresentation props_CSSList;
  private ConceptPresentation props_CSSProperty;
  private ConceptPresentation props_DivTag;
  private ConceptPresentation props_HTML;
  private ConceptPresentation props_HeadTag;
  private ConceptPresentation props_PTag;
  private ConceptPresentation props_SpanTag;
  private ConceptPresentation props_TagList;
  private ConceptPresentation props_Text;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ATag:
        if (props_ATag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<a>");
          props_ATag = cpb.create();
        }
        return props_ATag;
      case LanguageConceptSwitch.AbstractTag:
        if (props_AbstractTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractTag = cpb.create();
        }
        return props_AbstractTag;
      case LanguageConceptSwitch.BodyTag:
        if (props_BodyTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<body>");
          props_BodyTag = cpb.create();
        }
        return props_BodyTag;
      case LanguageConceptSwitch.CSSList:
        if (props_CSSList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CSSList");
          props_CSSList = cpb.create();
        }
        return props_CSSList;
      case LanguageConceptSwitch.CSSProperty:
        if (props_CSSProperty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CSSProperty");
          props_CSSProperty = cpb.create();
        }
        return props_CSSProperty;
      case LanguageConceptSwitch.DivTag:
        if (props_DivTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<div>");
          props_DivTag = cpb.create();
        }
        return props_DivTag;
      case LanguageConceptSwitch.HTML:
        if (props_HTML == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_HTML = cpb.create();
        }
        return props_HTML;
      case LanguageConceptSwitch.HeadTag:
        if (props_HeadTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<head>");
          props_HeadTag = cpb.create();
        }
        return props_HeadTag;
      case LanguageConceptSwitch.PTag:
        if (props_PTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<p>");
          props_PTag = cpb.create();
        }
        return props_PTag;
      case LanguageConceptSwitch.SpanTag:
        if (props_SpanTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<span>");
          props_SpanTag = cpb.create();
        }
        return props_SpanTag;
      case LanguageConceptSwitch.TagList:
        if (props_TagList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TagList");
          props_TagList = cpb.create();
        }
        return props_TagList;
      case LanguageConceptSwitch.Text:
        if (props_Text == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("text");
          props_Text = cpb.create();
        }
        return props_Text;
    }
    return null;
  }
}
